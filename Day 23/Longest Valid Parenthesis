class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int> st;
        st.push(-1); // base for calculating lengths
        int maxLen = 0;

        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == '(') {
                st.push(i); // store index of '('
            } else {
                st.pop(); // matching with a '('
                if (st.empty()) {
                    st.push(i); // unmatched ')', reset base
                } else {
                    maxLen = max(maxLen, i - st.top()); // valid substring length
                }
            }
        }

        return maxLen;
    }
};
